
public class MergeSort {
	  /** The method for sorting the numbers */
	  public static void mergeSort(int[] list) {
	  if (list.length > 1) {
	  // Merge sort the first half
	  int[] firstHalf = new int[list.length / 2];
	  System.arraycopy(list, 0, firstHalf, 0, list.length / 2);
	  mergeSort(firstHalf);
	 
	 // Merge sort the second half
	 int secondHalfLength = list.length - list.length / 2;
	 int[] secondHalf = new int[secondHalfLength];
	 System.arraycopy(list, list.length / 2,
	 secondHalf, 0, secondHalfLength);
	 mergeSort(secondHalf);
	
	 // Merge firstHalf with secondHalf into list
	 merge(firstHalf, secondHalf, list);
	 }
	}
	  public static void merge(int[] list1, int[] list2, int[] temp) {
		  int current1 = 0;
		  int current2 = 0; // Current index in list2
		   int current3 = 0; // Current index in temp
		  
		   while (current1 < list1.length && current2 < list2.length) {
		   if (list1[current1] < list2[current2])
		   temp[current3++] = list1[current1++];
		   else
		   temp[current3++] = list2[current2++];
		   }
		  
		   while (current1 < list1.length)
		   temp[current3++] = list1[current1++];
		  
		   while (current2 < list2.length)
		   temp[current3++] = list2[current2++];



}
	  public static void main(String[] args) {
		  int[] list = {-2, 1, -3, 4, -1, 2, 1, -5, 4,5,6,7,8,2,3,4,7,8,6,4,3,2,3,4,5,6,7,7,8,9,12,13,14,15,17,2, 1, 
	        		-3, 4, -1, 2, 1, -5, 4,5,6,7,8,2,3,4,7,8,6,4,3,2,3,4,5,6,7,7,8,9,12,13,14,15,17,2, 1, -3, 4,
	        		-1, 2, 1, -5, 4,5,6,7,8,2,3,4,7,8,6,4,3,2,3,4,5,6,7,7,8,9,12,13,14,15,17,2, 1, -3, 4, -1, 
	        		2, 1, -5, 4,5,6,7,8,2,3,4,7,8,6,4,3,2,3,4,5,6,7,7,8,9,12,13,14,15,17,2, 1, -3, 4, -1, 2, 1, 
	        		-5, 4,5,6,7,8,2,3,4,7,8,6,4,3,2,3,4,5,6,7,7,8,9,12,13,14,15,17,2, 1, -3, 4, -1, 2, 1, -5, 4,
	        		5,6,7,8,2,3,4,7,8,6,4,3,2,3,4,5,6,7,7,8,9,12,13,14,15,17,2, 1, -3, 4, -1, 2, 1, -5, 4,5,6,7,8,2,
	        		3,4,7,8,6,4,3,2,3,4,5,6,7,7,8,9,12,13,14,15,17,-2, 1, -3, 4, -1, 2, 1, -5, 4,5,6,7,8,2,3,4,7,8,6,4,3,2,3,4,5,6,7,7,8,9,12,13,14,15,17,2, 1, 
	        		-3, 4, -1, 2, 1, -5, 4,5,6,7,8,2,3,4,7,8,6,4,3,2,3,4,5,6,7,7,8,9,12,13,14,15,17,2, 1, -3, 4,
	        		-1, 2, 1, -5, 4,5,6,7,8,2,3,4,7,8,6,4,3,2,3,4,5,6,7,7,8,9,12,13,14,15,17,2, 1, -3, 4, -1, 
	        		2, 1, -5, 4,5,6,7,8,2,3,4,7,8,6,4,3,2,3,4,5,6,7,7,8,9,12,13,14,15,17,2, 1, -3, 4, -1, 2, 1, 
	        		-5, 4,5,6,7,8,2,3,4,7,8,6,4,3,2,3,4,5,6,7,7,8,9,12,13,14,15,17,2, 1, -3, 4, -1, 2, 1, -5, 4,
	        		5,6,7,8,2,3,4,7,8,6,4,3,2,3,4,5,6,7,7,8,9,12,13,14,15,17,2, 1, -3, 4, -1, 2, 1, -5, 4,5,6,7,8,2,
	        		3,4,7,8,6,4,3,2,3,4,5,6,7,7,8,9,12,13,14,15,17,-2, 1, -3, 4, -1, 2, 1, -5, 4,5,6,7,8,2,3,4,7,8,6,4,3,2,3,4,5,6,7,7,8,9,12,13,14,15,17,2, 1, 
	        		-3, 4, -1, 2, 1, -5, 4,5,6,7,8,2,3,4,7,8,6,4,3,2,3,4,5,6,7,7,8,9,12,13,14,15,17,2, 1, -3, 4,
	        		-1, 2, 1, -5, 4,5,6,7,8,2,3,4,7,8,6,4,3,2,3,4,5,6,7,7,8,9,12,13,14,15,17,2, 1, -3, 4, -1, 
	        		2, 1, -5, 4,5,6,7,8,2,3,4,7,8,6,4,3,2,3,4,5,6,7,7,8,9,12,13,14,15,17,2, 1, -3, 4, -1, 2, 1, 
	        		-5, 4,5,6,7,8,2,3,4,7,8,6,4,3,2,3,4,5,6,7,7,8,9,12,13,14,15,17,2, 1, -3, 4, -1, 2, 1, -5, 4,
	        		5,6,7,8,2,3,4,7,8,6,4,3,2,3,4,5,6,7,7,8,9,12,13,14,15,17,2, 1, -3, 4, -1, 2, 1, -5, 4,5,6,7,8,2,
	        		3,4,7,8,6,4,3,2,3,4,5,6,7,7,8,9,12,13,14,15,17};
			 long startTime = System.currentTimeMillis();
			 mergeSort(list);
			 long endTime = System.currentTimeMillis();
		     System.out.println("Algoritmi MergeSort merr kohe " + (endTime - startTime) + " milliseconds");
			 for (int i = 0; i < list.length; i++)
			 System.out.print(list[i] + " ");
			 }
			 

 class InsertionSort {
 /** The method for sorting the numbers */
 public static void insertionSort(int[] list) {
 for (int i = 1; i < list.length; i++) {
 /** Insert list[i] into a sorted sublist list[0..iâˆ’1] so that
 list[0..i] is sorted. */
 int currentElement = list[i];
 int k;
 for (k = i - 1; k >= 0 && list[k] > currentElement; k--) {
 list[k + 1] = list[k];
 }

 // Insert the current element into list[k + 1]
 list[k + 1] = currentElement;
 }
 }
 
 public static void main(String[] args) {
	 int[] list = {-2, 1, -3, 4, -1, 2, 1, -5, 4,5,6,7,8,2,3,4,7,8,6,4,3,2,3,4,5,6,7,7,8,9,12,13,14,15,17,2, 1, 
     		-3, 4, -1, 2, 1, -5, 4,5,6,7,8,2,3,4,7,8,6,4,3,2,3,4,5,6,7,7,8,9,12,13,14,15,17,2, 1, -3, 4,
     		-1, 2, 1, -5, 4,5,6,7,8,2,3,4,7,8,6,4,3,2,3,4,5,6,7,7,8,9,12,13,14,15,17,2, 1, -3, 4, -1, 
     		2, 1, -5, 4,5,6,7,8,2,3,4,7,8,6,4,3,2,3,4,5,6,7,7,8,9,12,13,14,15,17,2, 1, -3, 4, -1, 2, 1, 
     		-5, 4,5,6,7,8,2,3,4,7,8,6,4,3,2,3,4,5,6,7,7,8,9,12,13,14,15,17,2, 1, -3, 4, -1, 2, 1, -5, 4,
     		5,6,7,8,2,3,4,7,8,6,4,3,2,3,4,5,6,7,7,8,9,12,13,14,15,17,2, 1, -3, 4, -1, 2, 1, -5, 4,5,6,7,8,2,
     		3,4,7,8,6,4,3,2,3,4,5,6,7,7,8,9,12,13,14,15,17,-2, 1, -3, 4, -1, 2, 1, -5, 4,5,6,7,8,2,3,4,7,8,6,4,3,2,3,4,5,6,7,7,8,9,12,13,14,15,17,2, 1, 
     		-3, 4, -1, 2, 1, -5, 4,5,6,7,8,2,3,4,7,8,6,4,3,2,3,4,5,6,7,7,8,9,12,13,14,15,17,2, 1, -3, 4,
     		-1, 2, 1, -5, 4,5,6,7,8,2,3,4,7,8,6,4,3,2,3,4,5,6,7,7,8,9,12,13,14,15,17,2, 1, -3, 4, -1, 
     		2, 1, -5, 4,5,6,7,8,2,3,4,7,8,6,4,3,2,3,4,5,6,7,7,8,9,12,13,14,15,17,2, 1, -3, 4, -1, 2, 1, 
     		-5, 4,5,6,7,8,2,3,4,7,8,6,4,3,2,3,4,5,6,7,7,8,9,12,13,14,15,17,2, 1, -3, 4, -1, 2, 1, -5, 4,
     		5,6,7,8,2,3,4,7,8,6,4,3,2,3,4,5,6,7,7,8,9,12,13,14,15,17,2, 1, -3, 4, -1, 2, 1, -5, 4,5,6,7,8,2,
     		3,4,7,8,6,4,3,2,3,4,5,6,7,7,8,9,12,13,14,15,17,-2, 1, -3, 4, -1, 2, 1, -5, 4,5,6,7,8,2,3,4,7,8,6,4,3,2,3,4,5,6,7,7,8,9,12,13,14,15,17,2, 1, 
     		-3, 4, -1, 2, 1, -5, 4,5,6,7,8,2,3,4,7,8,6,4,3,2,3,4,5,6,7,7,8,9,12,13,14,15,17,2, 1, -3, 4,
     		-1, 2, 1, -5, 4,5,6,7,8,2,3,4,7,8,6,4,3,2,3,4,5,6,7,7,8,9,12,13,14,15,17,2, 1, -3, 4, -1, 
     		2, 1, -5, 4,5,6,7,8,2,3,4,7,8,6,4,3,2,3,4,5,6,7,7,8,9,12,13,14,15,17,2, 1, -3, 4, -1, 2, 1, 
     		-5, 4,5,6,7,8,2,3,4,7,8,6,4,3,2,3,4,5,6,7,7,8,9,12,13,14,15,17,2, 1, -3, 4, -1, 2, 1, -5, 4,
     		5,6,7,8,2,3,4,7,8,6,4,3,2,3,4,5,6,7,7,8,9,12,13,14,15,17,2, 1, -3, 4, -1, 2, 1, -5, 4,5,6,7,8,2,
     		3,4,7,8,6,4,3,2,3,4,5,6,7,7,8,9,12,13,14,15,17};
	 long startTime = System.currentTimeMillis();
	 insertionSort(list);
	 long endTime = System.currentTimeMillis();
     System.out.println("Algoritmi InsertionSort merr kohe " + (endTime - startTime) + " milliseconds");
	 for (int i = 0; i < list.length; i++) {
		 int nr = 10;
		 int count = 0;
	   System.out.print(list[i] + " ");
	   count++;
	   if (( count % nr) == 0) {
		   System.out.println();
		   }
	 }
 }

}


}
